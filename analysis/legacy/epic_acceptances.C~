// Jan 22, 2025
// Draw P-eta detector acceptance regions for ePIC
#include <TROOT.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <iterator>

// Momenta (p) for each detector's (eta, p) acceptance region
double pfRICH_P[5] = {8.6, 8.6, 2.0, 2.0, 8.6};
double ToF_HRPPD_P[5] = {2.7, 2.8, 0.11, 0.8, 2.7}; // same eta as pfRICH
double hpDIRC_P[5] = {5.98, 5.98, 0.48, 0.48, 5.98};
double ToF_barrel_P[5] = {1.75, 1.76, 0.17, 0.17, 1.75};
double dRICH_gas_P[5] = {51.9, 51.9, 4.02, 4.02, 51.9};
double dRICH_gel_P[5] = {16.4, 14.9, 1.4, 1.4, 16.4};
double ToF_HD_P[5] = {2.47, 2.42, 0.57, 0.11, 2.47};

// Detector geometry. Everything in centimeters
// IR = inner radius
// OR = outer radius
// physStart, physEnd = physical start/end as measured from z=0
double pfRICH_IR = 9.5;
double pfRICH_OR = 65.0;
double pfRICH_physStart = -172.7;
double pfRICH_physEnd = -123.6;

double hpDIRC_IR = 75.5;
double hpDIRC_OR = 78.6; // not used in eta calculation
double hpDIRC_physStart = -273.0;
double hpDIRC_physEnd = 185.0;

double ToF_barrel_IR = 62.0;
double ToF_barrel_OR = 69.5; // not used in eta calculation
double ToF_barrel_physStart = -117.5;
double ToF_barrel_physEnd = 171.5;

double dRICH_gas_IR = 22.0;
double dRICH_gas_OR = 180.0;
double dRICH_gas_physStart = 231.0;
double dRICH_gas_physEnd = 325.0;

double dRICH_gel_IR = 22.0;
double dRICH_gel_OR = 109.4;
double dRICH_gel_physStart = 198.0;
double dRICH_gel_physEnd = 231.0;

double ToF_HD_IR = 10.5;
double ToF_HD_OR = 60.0;
double ToF_HD_physStart = 185.0;
double ToF_HD_physEnd = 193.0;

double calc_eta(double theta){
  // -1 * ln[ tan(theta/2) ]
  return -1 * TMath::Log( TMath::Tan(TMath::Abs(theta) / 2.0) );
}

// TODO
// for all get_eta functions, add check to make sure physStart, physEnd match detector type (backward, forward, barrel)


// Calculate effective pseudorapidity for detectors entirely in backward region
// dz = z location of target
void get_eta_backward(double etaArr[], double IR, double OR, double physStart, double physEnd, double dz){
  //double thetaLow = TMath::ATan(IR / TMath::Abs(physStart - dz));
  double thetaLow = TMath::ATan(IR / TMath::Abs(physEnd - dz)); // from inner face
  double thetaHigh = TMath::ATan(OR / TMath::Abs(physEnd - dz));
  double etaLow = -1 * calc_eta(thetaLow);
  double etaHigh = -1 * calc_eta(thetaHigh);
  etaArr[0] = etaLow;
  etaArr[1] = etaHigh;
  etaArr[2] = etaHigh;
  etaArr[3] = etaLow;
  etaArr[4] = etaLow;
}

// Calculate effective pseudorapidity for detectors entirely in forward region
void get_eta_forward(double etaArr[], double IR, double OR, double physStart, double physEnd, double dz){
  double thetaLow = TMath::ATan(OR / TMath::Abs(physStart - dz));
  //double thetaHigh = TMath::ATan(IR / TMath::Abs(physEnd - dz));
  double thetaHigh = TMath::ATan(IR / TMath::Abs(physStart - dz)); // from inner face
  double etaLow = calc_eta(thetaLow);
  double etaHigh = calc_eta(thetaHigh);
  etaArr[0] = etaLow;
  etaArr[1] = etaHigh;
  etaArr[2] = etaHigh;
  etaArr[3] = etaLow;
  etaArr[4] = etaLow;
}

// Calculate effective pseudorapidity for barrel detectors that start in backward region, end in forward region
// Going from inner radius is probably not realistic but IR vs OR doesn't change things much so fine to first order
void get_eta_barrel(double etaArr[], double IR, double physStart, double physEnd, double dz){
  double thetaLow = TMath::ATan(IR / TMath::Abs(physStart - dz));
  double thetaHigh = TMath::ATan(IR / TMath::Abs(physEnd - dz));
  double etaLow = -1 * calc_eta(thetaLow);
  double etaHigh = calc_eta(thetaHigh);
  etaArr[0] = etaLow;
  etaArr[1] = etaHigh;
  etaArr[2] = etaHigh;
  etaArr[3] = etaLow;
  etaArr[4] = etaLow;
}

void get_eta(double etaArr[], double IR, double OR, double physStart, double physEnd, double dz){
  if (dz < physStart){
    get_eta_forward(etaArr, IR, OR, physStart, physEnd, dz);
  }
  else if (dz > physEnd){
    get_eta_backward(etaArr, IR, OR, physStart, physEnd, dz);
  }
  else {
    get_eta_barrel(etaArr, IR, physStart, physEnd, dz);
  }
}

void epic_acceptances(double dz=0){
  double textsize = 0.04;
  int lw = 3; // line width
  //TCanvas *c = new TCanvas();
  //c->cd();
  //gPad->SetLogy();
  //TH2F *h = new TH2F("h", "h", 10, -5, 5, 10, 0.08, 300);
  //h->Draw();
  double pfRICH_eta[5];
  get_eta(pfRICH_eta, pfRICH_IR, pfRICH_OR, pfRICH_physStart, pfRICH_physEnd, dz);
  TPolyLine *pl_pfRICH = new TPolyLine(5, pfRICH_eta, pfRICH_P);
  pl_pfRICH->SetFillColor(38);
  pl_pfRICH->SetLineColor(1);
  pl_pfRICH->SetLineWidth(lw);
  TText *text_pfRICH = new TText(-3.2, 5, "pfRICH");
  text_pfRICH->SetTextSize(textsize);
  //text_pfRICH->Draw();
  pl_pfRICH->Draw();
  //std::cout << pfRICH_eta[0] << ", " << pfRICH_eta[1] << ", " << pfRICH_eta[2] << ", " << pfRICH_eta[3] << ", " << pfRICH_eta[4] << std::endl;

  TPolyLine *pl_ToF_HRPPD = new TPolyLine(5, pfRICH_eta, ToF_HRPPD_P);
  pl_ToF_HRPPD->SetFillColor(38);
  pl_ToF_HRPPD->SetLineColor(1);
  pl_ToF_HRPPD->SetLineWidth(lw);
  pl_ToF_HRPPD->SetLineStyle(9);
  TText *text_ToF_HRPPD = new TText(-3, 1.3, "ToF");
  TText *text_ToF_HRPPD2 = new TText(-3.2, 0.8, "(HRPPD)");
  text_ToF_HRPPD->SetTextSize(textsize);
  text_ToF_HRPPD2->SetTextSize(textsize);
  //text_ToF_HRPPD->Draw();
  //text_ToF_HRPPD2->Draw();
  pl_ToF_HRPPD->Draw();

  double hpDIRC_eta[5];
  get_eta(hpDIRC_eta, hpDIRC_IR, pfRICH_OR, hpDIRC_physStart, hpDIRC_physEnd, dz);
  TPolyLine *pl_hpDIRC = new TPolyLine(5, hpDIRC_eta, hpDIRC_P);
  pl_hpDIRC->SetFillColor(38);
  pl_hpDIRC->SetLineColor(1);
  pl_hpDIRC->SetLineWidth(lw);
  TText *text_hpDIRC = new TText(-0.5, 3.8, "hpDIRC");
  text_hpDIRC->SetTextSize(textsize);
  //text_hpDIRC->Draw();
  pl_hpDIRC->Draw();

  double ToF_barrel_eta[5];
  get_eta(ToF_barrel_eta, ToF_barrel_IR, ToF_barrel_OR, ToF_barrel_physStart, ToF_barrel_physEnd, dz);
  TPolyLine *pl_ToF_barrel = new TPolyLine(5, ToF_barrel_eta, ToF_barrel_P);
  pl_ToF_barrel->SetFillColor(38);
  pl_ToF_barrel->SetLineColor(1);
  pl_ToF_barrel->SetLineWidth(lw);
  pl_ToF_barrel->SetLineStyle(2);
  TText *text_ToF_barrel = new TText(-0.6, 0.3, "Barrel ToF");
  text_ToF_barrel->SetTextSize(textsize);
  //text_ToF_barrel->Draw();
  pl_ToF_barrel->Draw();

  double dRICH_gas_eta[5];
  get_eta(dRICH_gas_eta, dRICH_gas_IR, dRICH_gas_OR, dRICH_gas_physStart, dRICH_gas_physEnd, dz);
  TPolyLine *pl_dRICH_gas = new TPolyLine(5, dRICH_gas_eta, dRICH_gas_P);
  pl_dRICH_gas->SetFillColor(38);
  pl_dRICH_gas->SetLineColor(1);
  pl_dRICH_gas->SetLineWidth(lw);
  TText *text_dRICH_gas = new TText(1.15, 30, "dRICH (gas)");
  text_dRICH_gas->SetTextSize(textsize);
  //text_dRICH_gas->Draw();
  pl_dRICH_gas->Draw();

  double dRICH_gel_eta[5];
  get_eta(dRICH_gel_eta, dRICH_gel_IR, dRICH_gel_OR, dRICH_gel_physStart, dRICH_gel_physEnd, dz);
  TPolyLine *pl_dRICH_gel = new TPolyLine(5, dRICH_gel_eta, dRICH_gel_P);
  pl_dRICH_gel->SetFillColor(38);
  pl_dRICH_gel->SetLineColor(1);
  pl_dRICH_gel->SetLineWidth(lw);
  pl_dRICH_gel->SetLineStyle(9);
  TText *text_dRICH_gel = new TText(1.5, 9.5, "dRICH");
  TText *text_dRICH_gel2 = new TText(1.5, 6.8, "(aerogel)");
  text_dRICH_gel->SetTextSize(textsize);
  text_dRICH_gel2->SetTextSize(textsize);
  //text_dRICH_gel->Draw();
  //text_dRICH_gel2->Draw();
  pl_dRICH_gel->Draw();

  double ToF_HD_eta[5];
  get_eta(ToF_HD_eta, ToF_HD_IR, ToF_HD_OR, ToF_HD_physStart, ToF_HD_physEnd, dz);
  TPolyLine *pl_ToF_HD = new TPolyLine(5, ToF_HD_eta, ToF_HD_P);
  pl_ToF_HD->SetFillColor(38);
  pl_ToF_HD->SetLineColor(1);
  pl_ToF_HD->SetLineWidth(lw);
  TText *text_ToF_HD = new TText(2, 0.7, "HD ToF");
  text_ToF_HD->SetTextSize(textsize);
  //text_ToF_HD->Draw();
  pl_ToF_HD->Draw();
}



